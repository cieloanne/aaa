import tkinter as tk


class Cake:
    def __init__(self, name, price, ingredients):
        self.name = name
        self.price = price
        self.ingredients = ingredients

    def __str__(self):
        return "{} - ${}\nIngredients: {}".format(self.name, self.price, ", ".join(self.ingredients))


class Menu:
    def __init__(self, cakes):
        self.cakes = cakes

    def display(self):
        menu_window = tk.Toplevel()
        menu_window.title("Menu")

        menu_label = tk.Label(menu_window, text="Menu:")
        menu_label.pack()

        for cake in self.cakes:
            cake_label = tk.Label(menu_window, text=str(cake))
            cake_label.pack()

        close_button = tk.Button(menu_window, text="Close", command=menu_window.destroy)
        close_button.pack()

    def search(self, ingredient):
        results = []
        for cake in self.cakes:
            if ingredient in cake.ingredients:
                results.append(cake)
        return results


class Order:
    def __init__(self):
        self.items = []

    def add_item(self, item):
        self.items.append(item)

    def remove_item(self, item):
        self.items.remove(item)

    def total(self):
        total = 0
        for item in self.items:
            total += item.price
        return total

    def display(self):
        order_window = tk.Toplevel()
        order_window.title("Order")

        order_label = tk.Label(order_window, text="Order:")
        order_label.pack()

        for item in self.items:
            item_label = tk.Label(order_window, text=str(item))
            item_label.pack()

        total_label = tk.Label(order_window, text="Total: ${}".format(self.total()))
        total_label.pack()

        close_button = tk.Button(order_window, text="Close", command=order_window.destroy)
        close_button.pack()


class CakeShop:
    def __init__(self):
        self.cakes = [
            Cake("Chocolate Cake", 25, ["flour", "sugar", "cocoa powder", "eggs", "butter"]),
            Cake("Vanilla Cake", 20, ["flour", "sugar", "eggs", "butter", "vanilla extract"]),
            Cake("Red Velvet Cake", 30, ["flour", "sugar", "cocoa powder", "buttermilk", "eggs", "butter"]),
            Cake("Carrot Cake", 35, ["flour", "sugar", "carrots", "walnuts", "raisins", "eggs", "butter"])
        ]

        self.menu = Menu(self.cakes)
        self.order = Order()

        self.root = tk.Tk()
        self.root.title("Cake Shop")

        self.main_menu()

    def main_menu(self):
        menu_label = tk.Label(self.root, text="Welcome to the Cake Shop!")
        menu_label.pack()

        menu_button = tk.Button(self.root, text="Menu", command=self.menu.display)
        menu_button.pack()

        search_button = tk.Button(self.root, text="Search Cakes by Ingredient", command=self.search_menu)
        search_button.pack()

        order_button = tk.Button(self.root, text="Order", command=self.order.display)
        order_button.pack()

        close_button    = tk.Button(self.root, text="Close", command=self.root.destroy)
        close_button.pack()

def search_menu(self):
    search_window = tk.Toplevel()
    search_window.title("Search Cakes by Ingredient")

    search_label = tk.Label(search_window, text="Enter an ingredient to search for:")
    search_label.pack()

    search_entry = tk.Entry(search_window)
    search_entry.pack()

    search_button = tk.Button(search_window, text="Search", command=lambda: self.search_cakes(search_entry.get()))
    search_button.pack()

def search_cakes(self, ingredient):
    results = self.menu.search(ingredient)

    results_window = tk.Toplevel()
    results_window.title("Search Results")

    results_label = tk.Label(results_window, text="Results:")
    results_label.pack()

    if results:
        for cake in results:
            cake_label = tk.Label(results_window, text=str(cake))
            cake_label.pack()
    else:
        no_results_label = tk.Label(results_window, text="No cakes found.")
        no_results_label.pack()

    close_button = tk.Button(results_window, text="Close", command=results_window.destroy)
    close_button.pack()

def run(self):
    self.root.mainloop()

    if __name__ == "__main__":
        cake_shop = CakeShop()
        cake_shop.run()

